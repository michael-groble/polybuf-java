/*
 * Copyright (c) 2012 Michael Groble
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
 * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS
 * OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

package polybuf.classifiers;

class SameCaseTextModel extends BigramTextModel implements ByteArrayModel {

  private static final float log2ProbPad;

  private static final float[] unigram;
  private static final float[] start;
  private static final float[] end;
  private static final float[][] bigram;

  static {
    unigram = new float[] { 934013, 127131, 150408, 240861, 728372, 78746, 196192, 157668, 688659, 78287, 236045,
        339527, 243961, 564068, 445741, 174568, 35232, 499997, 453240, 459326, 305971, 111585, 52136, 15711, 83005,
        78753, 8650, 8073, 7100, 4751, 4418, 4254, 3699, 3373, 3767, 3894, 216, 3621 };
    log2Normalize(unigram);

    start = new float[] { 63903, 43536, 34415, 43427, 32755, 26503, 31447, 28743, 34830, 10137, 52223, 26772, 54744,
        33455, 24658, 67878, 5949, 33394, 73820, 43628, 17570, 27471, 14521, 3232, 4572, 13128, 1081, 3246, 2147, 1147,
        870, 745, 701, 575, 531, 525, 2, 2 };
    log2Normalize(start);

    end = new float[] { 125911, 2932, 4685, 23731, 95404, 3077, 24338, 14913, 71029, 7542, 25415, 18280, 30070, 88580,
        53940, 5416, 6342, 42916, 81045, 63176, 28238, 4091, 1661, 1615, 16638, 5101, 2414, 1418, 1379, 1177, 1207,
        1032, 976, 861, 884, 845, 2, 2 };
    log2Normalize(end);

    bigram = new float[38][];
    bigram[0] = new float[] { 39130, 27428, 20238, 40109, 14800, 11352, 35537, 38216, 37888, 18570, 48358, 63894,
        56732, 69575, 6070, 33507, 12543, 81182, 44526, 77329, 13914, 26391, 18699, 2625, 13980, 16868, 94, 61, 63, 55,
        64, 44, 43, 42, 40, 32, 1, 1 };
    bigram[1] = new float[] { 18556, 1471, 166, 1437, 8076, 248, 1038, 392, 8775, 138, 653, 2475, 8511, 2500, 8991,
        300, 48, 6422, 2592, 1368, 6624, 173, 150, 92, 1129, 1087, 17, 18, 19, 10, 13, 18, 9, 6, 7, 9, 1, 1 };
    bigram[2] = new float[] { 20622, 277, 2694, 619, 13952, 124, 224, 307, 23514, 207, 893, 1613, 1019, 11471, 7997,
        556, 44, 4923, 14062, 1046, 5443, 553, 318, 397, 2402, 411, 57, 17, 32, 21, 10, 21, 7, 10, 10, 13, 1, 1 };
    bigram[3] = new float[] { 39066, 628, 354, 8135, 26086, 406, 1551, 545, 22773, 668, 558, 8076, 1096, 38648, 16585,
        433, 299, 12517, 1476, 742, 10389, 467, 355, 194, 3818, 1326, 18, 11, 24, 22, 12, 14, 17, 11, 11, 11, 1, 1 };
    bigram[4] = new float[] { 6804, 24599, 13955, 49418, 15285, 10520, 33426, 27582, 34636, 19114, 23754, 54373, 39947,
        56179, 6889, 24154, 824, 72704, 38872, 73857, 9808, 29076, 9846, 1611, 5480, 12537, 73, 33, 23, 18, 22, 53, 24,
        18, 13, 22, 1, 1 };
    bigram[5] = new float[] { 9207, 127, 101, 539, 6612, 4541, 347, 276, 7073, 153, 243, 1833, 789, 3652, 4977, 742,
        12, 4022, 1902, 771, 2674, 91, 88, 50, 1181, 74, 26, 7, 17, 12, 10, 12, 5, 10, 12, 9, 1, 1 };
    bigram[6] = new float[] { 24515, 267, 100, 949, 19553, 603, 3477, 334, 22757, 119, 315, 3032, 619, 51656, 12462,
        551, 7, 9178, 1921, 1584, 7654, 206, 190, 47, 1696, 790, 39, 18, 18, 15, 10, 11, 7, 4, 6, 2, 1, 1 };
    bigram[7] = new float[] { 13882, 1239, 38640, 5083, 5622, 170, 3689, 903, 6517, 147, 2928, 2149, 831, 3322, 4296,
        2837, 15, 2826, 15910, 9609, 3168, 261, 1912, 501, 333, 1738, 50, 47, 43, 36, 31, 28, 27, 32, 36, 33, 1, 1 };
    bigram[8] = new float[] { 20238, 17386, 20504, 38772, 21412, 15024, 22710, 20526, 11323, 7585, 24977, 66003, 36676,
        62246, 4947, 17330, 2665, 69101, 49050, 67810, 10390, 21789, 6307, 3112, 2097, 13664, 20, 7, 9, 10, 8, 11, 11,
        6, 8, 5, 1, 1 };
    bigram[9] = new float[] { 10957, 754, 755, 1376, 6574, 430, 2230, 522, 11320, 85, 856, 4738, 702, 6206, 8580, 409,
        42, 2197, 2492, 1996, 3258, 655, 22, 28, 638, 287, 14, 3, 6, 9, 6, 5, 3, 5, 2, 5, 1, 1 };
    bigram[10] = new float[] { 34209, 443, 4665, 1443, 23597, 324, 2141, 1404, 33762, 1003, 5548, 4145, 954, 9470,
        11332, 542, 9, 9070, 22749, 2297, 10025, 419, 259, 84, 1710, 1601, 136, 45, 66, 41, 52, 56, 45, 36, 47, 40, 1,
        1 };
    bigram[11] = new float[] { 71378, 7267, 2773, 3166, 46228, 3965, 5557, 3172, 39870, 332, 7686, 27071, 2050, 2924,
        30636, 8971, 263, 8803, 7233, 5037, 21636, 2135, 789, 168, 2426, 1104, 10, 9, 5, 2, 6, 5, 7, 3, 3, 5, 1, 1 };
    bigram[12] = new float[] { 41741, 219, 418, 1379, 27578, 184, 1083, 1930, 30344, 373, 884, 4246, 7658, 1383, 24845,
        345, 66, 10830, 5841, 1745, 20255, 153, 582, 106, 2793, 1600, 190, 44, 38, 36, 37, 60, 36, 28, 29, 21, 1, 1 };
    bigram[13] = new float[] { 131648, 736, 484, 3572, 112149, 717, 4092, 2634, 104277, 2620, 2122, 3657, 2429, 24199,
        63597, 761, 77, 16366, 3373, 4274, 35062, 2200, 1328, 125, 5179, 2723, 31, 26, 33, 17, 14, 25, 10, 14, 10, 7,
        1, 1 };
    bigram[14] = new float[] { 3466, 13962, 19149, 24154, 4662, 10356, 13773, 17309, 26061, 7817, 36319, 26460, 20428,
        25839, 12079, 26499, 1072, 41622, 20553, 37981, 2860, 13013, 2863, 1074, 5769, 5799, 9, 12, 23, 13, 10, 8, 11,
        8, 9, 5, 1, 1 };
    bigram[15] = new float[] { 18028, 153, 205, 832, 9378, 166, 1410, 500, 9739, 172, 505, 1737, 10362, 1193, 13271,
        6301, 13, 6654, 13768, 911, 7891, 374, 183, 882, 1172, 673, 40, 10, 13, 11, 14, 18, 6, 5, 11, 8, 1, 1 };
    bigram[16] = new float[] { 6523, 42, 180, 66, 8268, 28, 20, 209, 1441, 13, 17, 187, 167, 590, 7035, 17, 2521, 495,
        710, 82, 543, 26, 22, 19, 46, 22, 3, 3, 4, 2, 2, 2, 2, 1, 1, 1, 1, 1 };
    bigram[17] = new float[] { 103443, 10319, 4013, 8680, 121939, 5992, 11523, 3902, 24018, 250, 9204, 597, 858, 1204,
        56781, 25708, 137, 11387, 1805, 29164, 28436, 2486, 1026, 64, 2897, 605, 14, 8, 17, 22, 10, 9, 8, 5, 8, 8, 1, 1 };
    bigram[18] = new float[] { 55083, 2074, 1206, 5443, 58685, 1333, 6127, 1226, 66412, 1868, 7917, 6597, 3794, 24203,
        30084, 3201, 136, 22739, 24393, 16137, 31915, 1442, 972, 174, 5401, 476, 62, 28, 27, 20, 19, 9, 12, 11, 12, 11,
        1, 1 };
    bigram[19] = new float[] { 70553, 835, 4493, 1597, 41787, 3016, 3540, 6056, 50775, 796, 10325, 9078, 1867, 47872,
        18832, 3846, 113, 27497, 63660, 13845, 28885, 520, 294, 1007, 2583, 1740, 44, 14, 21, 17, 29, 22, 22, 16, 17,
        24, 1, 1 };
    bigram[20] = new float[] { 17471, 10929, 5929, 13037, 6938, 4559, 13772, 9719, 8322, 8041, 21254, 19968, 13160,
        13701, 12059, 10486, 7757, 20576, 22780, 31833, 6304, 2779, 552, 818, 1574, 4040, 3, 5, 10, 2, 7, 4, 1, 5, 4,
        3, 1, 1 };
    bigram[21] = new float[] { 17713, 198, 166, 1683, 11065, 149, 572, 939, 12179, 241, 1596, 2460, 353, 3652, 15517,
        278, 47, 4339, 3413, 2835, 2450, 293, 36, 160, 531, 1077, 28, 18, 14, 11, 13, 13, 15, 13, 11, 16, 1, 1 };
    bigram[22] = new float[] { 7603, 382, 149, 1226, 3809, 257, 1343, 1509, 2976, 78, 1022, 865, 712, 1003, 5593, 223,
        19, 1916, 1446, 1440, 1829, 11, 294, 65, 882, 871, 12, 4, 12, 9, 5, 7, 4, 3, 3, 2, 1, 1 };
    bigram[23] = new float[] { 2138, 30, 134, 86, 3988, 26, 43, 22, 1688, 6, 135, 220, 96, 265, 931, 48, 6, 283, 41,
        766, 920, 22, 11, 358, 67, 5, 39, 9, 22, 14, 35, 17, 12, 8, 10, 5, 1, 1 };
    bigram[24] = new float[] { 13669, 2174, 1760, 2542, 5414, 982, 2097, 2100, 5580, 189, 2130, 4943, 1284, 8777, 2117,
        712, 149, 5558, 3911, 4713, 1132, 1461, 3263, 137, 123, 1509, 4, 1, 2, 7, 6, 4, 1, 1, 2, 2, 1, 1 };
    bigram[25] = new float[] { 9970, 118, 2243, 1547, 8981, 110, 210, 145, 13306, 146, 271, 613, 425, 3262, 4958, 90,
        4, 3417, 3261, 6646, 4038, 386, 75, 13, 375, 1007, 2, 3, 4, 2, 1, 3, 1, 5, 2, 1, 1, 1 };
    bigram[26] = new float[] { 59, 14, 17, 22, 118, 10, 14, 54, 20, 2, 22, 38, 22, 53, 16, 22, 2, 35, 90, 41, 6, 5, 11,
        8, 19, 3, 1696, 910, 1029, 511, 439, 584, 411, 332, 457, 295, 27, 193 };
    bigram[27] = new float[] { 73, 29, 48, 38, 60, 21, 61, 47, 43, 8, 39, 17, 66, 85, 50, 65, 7, 84, 53, 39, 49, 19, 8,
        46, 10, 10, 536, 608, 477, 301, 268, 242, 203, 205, 252, 219, 23, 456 };
    bigram[28] = new float[] { 61, 33, 29, 36, 45, 15, 47, 64, 45, 5, 23, 39, 78, 63, 54, 53, 3, 52, 57, 32, 39, 23,
        12, 41, 13, 4, 861, 625, 462, 304, 263, 240, 216, 197, 292, 230, 22, 313 };
    bigram[29] = new float[] { 36, 19, 29, 21, 23, 11, 31, 68, 34, 3, 19, 15, 59, 45, 50, 42, 9, 33, 22, 26, 31, 13, 8,
        24, 6, 4, 308, 498, 410, 303, 250, 222, 214, 191, 250, 211, 21, 83 };
    bigram[30] = new float[] { 44, 11, 15, 19, 35, 11, 51, 56, 50, 5, 9, 14, 26, 59, 51, 32, 3, 24, 18, 13, 36, 8, 6,
        24, 7, 3, 297, 474, 469, 282, 257, 228, 229, 183, 215, 221, 7, 94 };
    bigram[31] = new float[] { 13, 10, 12, 9, 19, 8, 5, 40, 9, 1, 4, 8, 22, 10, 10, 20, 3, 24, 13, 22, 8, 4, 1, 19, 4,
        7, 284, 546, 544, 288, 292, 278, 221, 221, 211, 260, 16, 81 };
    bigram[32] = new float[] { 14, 9, 19, 10, 10, 8, 12, 9, 17, 2, 5, 7, 21, 13, 8, 11, 3, 20, 6, 15, 9, 15, 2, 19, 2,
        3, 243, 487, 360, 283, 219, 241, 210, 212, 194, 214, 34, 70 };
    bigram[33] = new float[] { 17, 11, 5, 12, 16, 2, 9, 7, 7, 4, 5, 5, 14, 9, 7, 15, 2, 20, 6, 5, 2, 10, 2, 13, 1, 2,
        259, 430, 363, 229, 223, 211, 199, 211, 182, 254, 4, 63 };
    bigram[34] = new float[] { 14, 3, 6, 12, 9, 10, 6, 7, 4, 4, 5, 9, 18, 10, 7, 10, 2, 15, 9, 3, 3, 7, 4, 11, 1, 4,
        290, 509, 618, 248, 232, 191, 201, 197, 225, 309, 2, 59 };
    bigram[35] = new float[] { 8, 9, 8, 8, 5, 10, 3, 3, 7, 2, 7, 11, 13, 10, 8, 15, 1, 15, 8, 10, 4, 8, 2, 8, 2, 4,
        271, 917, 281, 249, 197, 200, 180, 172, 192, 450, 3, 106 };
    bigram[36] = new float[] { 9, 3, 12, 3, 6, 2, 6, 4, 12, 1, 5, 9, 3, 3, 3, 2, 1, 1, 5, 7, 50, 3, 2, 1, 2, 1, 16, 11,
        11, 14, 5, 8, 9, 3, 10, 5, 2, 2 };
    bigram[37] = new float[] { 179, 29, 87, 88, 222, 17, 115, 55, 94, 15, 55, 83, 68, 174, 114, 56, 4, 172, 206, 157,
        31, 35, 19, 9, 56, 11, 178, 217, 170, 166, 158, 136, 122, 120, 117, 119, 1, 2 };
    log2Normalize(bigram);

    log2ProbPad = unigram[bigram.length - 2]; // make it the same as the '+',
                                              // i.e. rare

  }

  private int index(byte b) {
    int index = Base64Characters.index(b);
    // Map: upper, lower, numbers, +, /
    // to: lower, numbers, +, /
    if (index >= 26) {
      index -= 26;
    }
    return index;
  }

  @Override
  protected float log2ProbPad() {
    return log2ProbPad;
  }

  @Override
  protected float log2ProbStart(byte current) {
    int index = index(current);
    if (index < 0) {
      return Float.NEGATIVE_INFINITY;
    }
    return unigram[index];
  }

  @Override
  protected float log2ProbEnd(byte previous) {
    int index = index(previous);
    if (index < 0) {
      return Float.NEGATIVE_INFINITY;
    }
    return unigram[index];
  }

  private boolean differentCase(byte current, byte previous) {
    return ('A' <= current && current <= 'Z' && 'a' <= previous && previous <= 'z')
        || ('a' <= current && current <= 'z' && 'A' <= previous && previous <= 'Z');
  }

  @Override
  protected float log2ProbBigram(byte current, byte previous) {
    if (differentCase(current, previous)) {
      return Float.NEGATIVE_INFINITY;
    }
    int c = index(current);
    int p = index(previous);
    if (c < 0 || p < 0) {
      return Float.NEGATIVE_INFINITY;
    }
    return bigram[c][p];
  }
}
